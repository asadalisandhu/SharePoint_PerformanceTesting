<?xml version="1.0" encoding="UTF-8"?>
<TestRun id="03dce50d-2d27-4543-a78a-20a726cec92a" name="SPAdmin@CS02 2018-06-13 12:58:35" runUser="CS\SPAdmin" xmlns="http://microsoft.com/schemas/VisualStudio/TeamTest/2010">
  <TestSettings name="Local" id="879f9405-1edd-43f5-90cf-576a7ef84ea2">
    <Description>These are default test settings for a local test run.</Description>
    <Execution hostProcessPlatform="MSIL">
      <TestTypeSpecific />
      <AgentRule name="Execution Agents">
      </AgentRule>
    </Execution>
    <Deployment runDeploymentRoot="SPAdmin_CS02 2018-06-13 12_58_35" />
    <Properties>
      <Property name="TestSettingsUIType" value="LoadTest" />
    </Properties>
  </TestSettings>
  <Times creation="2018-06-13T12:58:35.3942652+01:00" queuing="2018-06-13T12:58:35.8202793+01:00" start="2018-06-13T12:58:36.0442717+01:00" finish="2018-06-13T12:58:48.7950404+01:00" />
  <ResultSummary outcome="Failed">
    <Counters total="1" executed="1" error="0" failed="1" timeout="0" aborted="0" inconclusive="0" passedButRunAborted="0" notRunnable="0" notExecuted="0" disconnected="0" warning="0" passed="0" completed="0" inProgress="0" pending="0" />
  </ResultSummary>
  <TestDefinitions>
    <WebTest name="WebTest3" storage="c:\users\spadmin\source\repos\sploadtesting\sploadtesting\webtest3.webtest" id="d2d8123a-ec8e-4a09-8e27-68c936a58d70" persistedWebTest="">
      <Execution id="cafd83a0-9878-4759-8f13-d14d1b75ca5b" />
    </WebTest>
  </TestDefinitions>
  <TestLists>
    <TestList name="Results Not in a List" id="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestList name="All Loaded Results" id="19431567-8539-422a-85d7-44ee4e166bda" />
  </TestLists>
  <TestEntries>
    <TestEntry isTransparent="false" testId="d2d8123a-ec8e-4a09-8e27-68c936a58d70" executionId="cafd83a0-9878-4759-8f13-d14d1b75ca5b" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
  </TestEntries>
  <Results>
    <WebTestResult executionId="cafd83a0-9878-4759-8f13-d14d1b75ca5b" testId="d2d8123a-ec8e-4a09-8e27-68c936a58d70" testName="WebTest3" computerName="CS02" duration="00:00:01.7098995" startTime="2018-06-13T12:58:36.3372757+01:00" endTime="2018-06-13T12:58:48.7580216+01:00" testType="4e7599fa-5ecb-43e9-a887-cd63cf72d207" outcome="Failed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="cafd83a0-9878-4759-8f13-d14d1b75ca5b">
      <Output>
        <ErrorInfo>
          <Message>1 primary requests, 0 dependant requests and 0 conditional rules failed</Message>
        </ErrorInfo>
      </Output>
      <ResultFiles>
        <ResultFile path="WebTest3.webtestResult" />
      </ResultFiles>
      <TestSettings name="Local" id="879f9405-1edd-43f5-90cf-576a7ef84ea2">
        <Description>These are default test settings for a local test run.</Description>
        <Execution hostProcessPlatform="MSIL">
          <TestTypeSpecific>
            <WebTestRunConfiguration testTypeId="4e7599fa-5ecb-43e9-a887-cd63cf72d207">
              <Browser name="Internet Explorer 9.0" MaxConnections="6">
                <Headers>
                  <Header name="User-Agent" value="Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Trident/5.0)" />
                  <Header name="Accept" value="*/*" />
                  <Header name="Accept-Language" value="{{$IEAcceptLanguage}}" />
                  <Header name="Accept-Encoding" value="GZIP" />
                </Headers>
              </Browser>
            </WebTestRunConfiguration>
          </TestTypeSpecific>
          <AgentRule name="Execution Agents">
          </AgentRule>
        </Execution>
        <Deployment runDeploymentRoot="SPAdmin_CS02 2018-06-13 12_58_35" />
        <Properties>
          <Property name="TestSettingsUIType" value="LoadTest" />
        </Properties>
      </TestSettings>
      <WebTestResultFilePath>SPAdmin_CS02 2018-06-13 12_58_35\In\cafd83a0-9878-4759-8f13-d14d1b75ca5b\WebTest3.webtestResult</WebTestResultFilePath>
    </WebTestResult>
  </Results>
</TestRun>